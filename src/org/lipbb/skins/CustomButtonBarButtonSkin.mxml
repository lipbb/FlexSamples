<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark ToggleButton component.  

     @see spark.components.ToggleButton
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:s="library://ns.adobe.com/flex/spark" 
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                   minWidth="21" minHeight="21" 
                   alpha.disabledStates="0.5">
	<fx:Metadata>[HostComponent("spark.components.ButtonBarButton")]</fx:Metadata>
    
    <!-- host component -->
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
           For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay"];

        /**
         * @private
         */    
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
		
        /**
         * @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
        {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
			
			maskRect.color = getStyle("parentBackgroundColor");
        }
        
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>
    
	<s:transitions>
		<s:Transition fromState="up" toState="*">
			<s:Parallel duration="200">
				<s:Animate target="{box}">
					<s:SimpleMotionPath property="y" />
				</s:Animate>
			</s:Parallel>
		</s:Transition>
		<s:Transition fromState="*" toState="up">
			<s:Parallel duration="200">
				<s:Animate target="{box}">
					<s:SimpleMotionPath property="y" />
				</s:Animate>
			</s:Parallel>
		</s:Transition>
	</s:transitions>
	
	<s:Path bottom="0" left="0">
		<s:data>m 0 0 h 5 v 5 z</s:data>
		<s:fill>
			<s:SolidColor color="0x888888" alpha="1" alpha.up="0"/>
		</s:fill>
	</s:Path>
	
	<s:Path bottom="0" right="0">
		<s:data>m 0 0 h 5 L 0 5 z</s:data>
		<s:fill>
			<s:SolidColor color="0x888888" alpha="1" alpha.up="0"/>
		</s:fill>
	</s:Path>
	<s:Rect height="5" left="5" right="5" bottom="0">
		<s:fill>
			<s:SolidColor id="maskRect" color="white" alpha="1" alpha.up="0"/>
		</s:fill>
	</s:Rect>
    <s:Group id="box" y="-5" y.up="0">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor id="bgColor" color="0xffff00" color.up="0xffffff" alpha="1" alpha.up="0"/>
			</s:fill>
		</s:Rect>
	    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	    <s:Label id="labelDisplay"
	             textAlign="center"
	             verticalAlign="middle"
	             maxDisplayedLines="1"
	             horizontalCenter="0" verticalCenter="0"
	             left="15" right="15" top="14" bottom="14">
	    </s:Label>
	</s:Group> 
    
    
</s:SparkButtonSkin>
